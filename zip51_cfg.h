/**********************************************************************************************************************
														zip51
												适合于在51芯片上的实时内核
												作者：孤独剑
												时间：2010 10  24
												本文件与工程配置有关
文件名：				zip51_cfg.h
修改时需要注意选择合适的数据类型和大小 
需要用户修改的两个文件之一 另外一个是tasks.c
每一个宏如果定义为1则启用该功能    定义为0则不适用该功能
**********************************************************************************************************************/




/**********************************************************************************************************************
												第一层配置设置
**********************************************************************************************************************/
#define						NO_USE									0
///这个宏不需修改！！


#define						TIME_CNT_EN								0
///是否计算系统自启动以来的时间  以ms为单位

#define						TIME_GET_EN								0
///是否要得到系统启动以来的时间

#define						TIME_SET_EN								0
///是否要设置系统时间

#define						WAKE_UP_EN								0
///是否启用唤醒任务功能

#define						TASK_SUSPEND_EN							0
///是否启用任务挂起功能    

#define						IDLE_CNT_EN								0
///是否启用空闲任务计数

#define						SCHED_LOCK_EN							0
///是否允许锁定任务调度

#define						SEM_EN									0
///是否启用信号量			启用之后zip51自动提供两个8位的信号量每一个可以管理最多255个相同的资源
///本功能占用四个字节的RAM


#define						MUTEX_EN								0
///是否启用互斥型信号量   zip51自动提供4个互斥型信号量
///本功能占用5个字节的RAM

#define						MBOX_EN									0
///是否启用消息邮箱功能    需要字节数（ MESSBOXLENGTH * MBOX_NUM + MBOX_NUM ）

#define						MESS_Q_EN								0
///是否启用消息队列功能		需要字节数 （6 + MESSBOXLENGTH * MAX_MESS_LEN ）



#if							MBOX_EN
#define						MBOX_POSTOPT_EN							0
///是否启用  MBoxPostOpt  功能
#else
#define						MBOX_POSTOPT_EN							NO_USE
#endif


#if							MESS_Q_EN
#define						Q_POST_OPT_EN							1
///是否启用QPostOpt（）函数
#define						Q_POST_FRONT_EN							1
///是否启用QPostFront（）函数
#else
#define						Q_POST_OPT_EN							NO_USE
#define						Q_POST_FRONT_EN							NO_USE
#endif










/**********************************************************************************************************************
												第二层配置设置
**********************************************************************************************************************/
#if							MBOX_EN	||	MESS_Q_EN
#define						MESSBOXLENGTH							1
///定义消息邮箱的类型 
///如果是1那么消息邮箱类型则是byte		如果是2那么消息邮箱类型是uint16		如果是4那么消息邮箱类型是uint32
#endif


#if							MBOX_EN
#define						MBOX_NUM								2
///定义多少个消息邮箱 
#endif



#if							MESS_Q_EN
#define						MAX_MESS_LEN							5
///消息队列的长度  也就是消息队列中最多允许多少个消息

#define						MESS_Q_POSI								1
///将消息队列放在什么内存区 0放在data区        1放在idata区
#endif


/***************************************************************************
				定义任务的堆栈长度  堆栈被放 idata区
				注意调用系统提供的函数不仅仅是一层函数 一般都是多层嵌套的
				每一个堆栈至少分配10字节调用深度增加之后相应的增加堆栈长度
***************************************************************************/
#define						STK0_LEN								25

#define						STK1_LEN								25

#define						STK2_LEN								25

#define						STK3_LEN								25

#define						STKIDLE_LEN					  			25


																	 
#define						TH 										0xFC
#define						TL 										0x18
/***************************************************************************
				定义系统时钟中断频率，建议设为每1ms一次时钟中断。
TH 							= (65536 - (1000 * Ms_PerTick )*XTal/12 ) / 256;
TL 							= (65536 - (1000 * Ms_PerTick )*XTal/12 ) % 256;
其中XTal为系统的时钟节拍，单位为	MHZ
Ms_PerTick	为期望的每次时钟节拍的时间间隔。
***************************************************************************/



/*#define						XTal								    (11.9521)
///系统的时钟频率					单位为  MHZ

#define						Ms_PerTick								1
///每两次时钟节拍中断的时间间隔 	单位为	ms	                           */



#if 						TIME_CNT_EN
#define						TIME_CNT_LENGTH							4
/**************************************************************
启动以来的时间计数变量的长度可以为 1  2  4 （单位字节）
当系统每两次时钟节拍间隔为1ms的时候也就是Ms_PerTick定义为1，那么：
如果该值为1则仅仅可以统计系统启动后255ms 
如果该值为2则可以统计65535ms也就是65s  
如果该值为4则可以统计4294967295ms也就是49天17个小时
**************************************************************/
#endif


#define						SLEEP_LENGTH							4
///定义任务睡眠时间计数的长短 （以字节为单位） 意义同上


#if							IDLE_CNT_EN
#define						IDLE_CNT_LENGTH							4
#endif
///定义空闲任务统计变量的长度  意义同上
